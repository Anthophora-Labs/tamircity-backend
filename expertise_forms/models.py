from django.db import models
from reservations.models import Reservation


class ExpertiseTV(models.Model):
    reservation = models.ForeignKey(Reservation, on_delete=models.CASCADE, related_name='expertise_tv')
    invoice = models.BooleanField()
    box = models.BooleanField()
    guarantee_term = models.IntegerField()
    guarantee_term_type = models.CharField(max_length=50)
    color = models.CharField(max_length=50)
    smart_tv = models.BooleanField()
    panel_technology = models.CharField(max_length=50)
    curved_screen = models.BooleanField()
    os_type = models.CharField(max_length=50)
    internal_satellite_receiver = models.BooleanField()
    screen_size = models.IntegerField()
    ambilight = models.BooleanField()
    hdr = models.BooleanField()
    full_array = models.BooleanField()
    screen_resolution = models.CharField(max_length=50)
    refresh_rate = models.IntegerField()
    release_year = models.IntegerField()
    screen_share = models.BooleanField()
    wifi = models.BooleanField()
    rf_input = models.BooleanField()
    lan = models.BooleanField()
    headphone_jack = models.BooleanField()
    bluetooth = models.BooleanField()
    hdmi = models.BooleanField()
    usb = models.BooleanField()

    is_screen_has_obscuration_problem = models.BooleanField()
    is_screen_has_dead_pixel_problem = models.BooleanField()
    is_screen_has_broken_problem = models.BooleanField()
    is_screen_has_downfall_problem = models.BooleanField()
    is_screen_has_band_problem = models.BooleanField()
    is_screen_has_freezing_problem = models.BooleanField()
    is_device_has_high_heat_problem = models.BooleanField()
    is_device_has_sound_problem = models.BooleanField()
    is_device_has_internal_receiver_problem = models.BooleanField()
    is_device_has_speaker_problem = models.BooleanField()
    is_screen_share_has_problem = models.BooleanField()
    is_wifi_has_problem = models.BooleanField()
    is_rf_input_has_problem = models.BooleanField()
    is_ethernet_has_problem = models.BooleanField()
    is_headphone_jack_has_problem = models.BooleanField()
    is_bluetooth_has_problem = models.BooleanField()
    is_hdmi_has_problem = models.BooleanField()
    is_usb_has_problem = models.BooleanField()
    is_remote_control_has_problem = models.BooleanField()

    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)
    
    
class ExpertiseWatch(models.Model):
    reservation = models.ForeignKey(Reservation, on_delete=models.CASCADE, related_name='expertise_watch')
    invoice = models.BooleanField()
    box = models.BooleanField()
    guarantee_term = models.IntegerField()
    guarantee_term_type = models.CharField(max_length=50)
    color = models.CharField(max_length=50)

    microphone = models.BooleanField()
    screen_size = models.IntegerField()
    memory = models.IntegerField()
    screen_type = models.CharField(max_length=50)
    os_type = models.CharField(max_length=50)
    os_type_compatiple = models.CharField(max_length=50)
    screen_resolution = models.CharField(max_length=50)
    cpu_frequency = models.IntegerField()
    battery_capacity = models.IntegerField()
    wifi = models.BooleanField()
    speaker = models.BooleanField()
    sim_support = models.BooleanField()
    dust_proof = models.BooleanField()
    nfc = models.BooleanField()

    is_screen_has_broken_problem = models.BooleanField()
    is_screen_has_obscuration_problem = models.BooleanField()
    is_touch_screen_has_problem = models.BooleanField()
    is_screen_has_dead_pixel = models.BooleanField()
    is_device_has_case_problem = models.BooleanField()
    is_speaker_has_problem = models.BooleanField()
    is_power_button_has_problem = models.BooleanField()
    is_battery_socket_has_problem = models.BooleanField()
    is_device_has_freezing_problem = models.BooleanField()
    is_bluetooth_has_problem = models.BooleanField()
    is_wifi_has_problem = models.BooleanField()
    is_microphone_has_problem = models.BooleanField()
    is_device_has_cellular_problem = models.BooleanField()
    
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)